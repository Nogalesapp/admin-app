{"version":3,"sources":["commons/device.js","components/Login.js","App.js","Routing.js","serviceWorker.js","index.js"],"names":["isMobileDevice","window","orientation","navigator","userAgent","indexOf","LoginComponent","props","login","e","preventDefault","err_message","setState","fetching","error","firebase","auth","signInWithEmailAndPassword","state","email","password","then","data","history","push","err","code","apps","length","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","className","style","display","justifyContent","paddingTop","paddingBottom","src","location","origin","height","alt","flexDirection","alignItems","onSubmit","this","width","value","onChange","evt","target","type","id","aria-describedby","placeholder","required","onClick","alignSelf","color","Component","MapContainer","displayMarkers","stores","map","store","index","key","title","name","time","position","lat","latitude","lng","longitude","onMarkerClick","marker","selectedPlace","activeMarker","showingInfoWindow","firestore","bd","Date","setHours","beginningDateObject","currentUser","replace","locations","selectedBusId","buses","distance","selectedBus","bus","batch","collection","doc","where","orderBy","get","querySnapshot","forEach","element","delete","ref","commit","markers","bounds","google","maps","LatLngBounds","deleteOldDates","localDate","setUTCSeconds","CreatedAt","seconds","getHours","getMinutes","latitud","longitud","extend","LatLng","toString","signOut","cursor","getMarkers","class","zoom","overFlow","marginRight","initialCenter","visible","path","strokeColor","strokeOpacity","strokeWeight","GoogleApiWrapper","language","routing","basename","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7598ef5a.chunk.js","sourcesContent":["export function isMobileDevice() {\r\n    return (typeof window.orientation !== \"undefined\") || (navigator.userAgent.indexOf('IEMobile') !== -1);\r\n};","import React, { Component } from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport { isMobileDevice } from '../commons/device';\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        if (!firebase.apps.length) {\r\n            this.app = firebase.initializeApp({\r\n                apiKey: \"AIzaSyBkRMV8HV4cazNztL2t5KAQ-QJKw1ch_Ug\",\r\n                authDomain: \"nogalesapp-1.firebaseapp.com\",\r\n                databaseURL: \"https://nogalesapp-1.firebaseio.com\",\r\n                projectId: \"nogalesapp-1\",\r\n                storageBucket: \"nogalesapp-1.appspot.com\",\r\n                messagingSenderId: \"235008508187\",\r\n                appId: \"1:235008508187:web:44833208e4bb535479d3be\"\r\n            });\r\n        }\r\n        this.state = {\r\n            fetching: false,\r\n            error: '',\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentWillUnmount(){\r\n\r\n    }\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        let err_message = 'Realizando Login ...';\r\n        this.setState({ fetching: true, error: err_message });\r\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then(\r\n            data => { this.props.history.push('/map'); },\r\n            err => {\r\n                err_message = err.code === 'auth/user-not-found' ? 'Usuario no encontrado' : 'Contraseña incorrecta';\r\n                this.setState({ fetching: false, error: err_message });\r\n            }\r\n        )   \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"navbar navbar-dark bg-dark\" style={{ display: 'flex', justifyContent: isMobileDevice() ? '' : 'center', paddingTop: 20, paddingBottom: 20 }} >\r\n                    <img src={window.location.origin + '/admin-app/assets/Nogales.png'} height={isMobileDevice() ? 30 : '100%'} className=\"img-responsive\" alt=\"Logo\"></img>\r\n                </div>\r\n                <div className=\"mt-3 pt-3\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\r\n                    <b className=\"mb-4\">Para ingresar al sistema, inicie sesión.</b>\r\n                    <hr></hr>\r\n                    <form onSubmit={this.login} style={{ width: '50%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                        <div className=\"form-group\" style={{ width: '100%' }} >\r\n                            <input value={this.state.email} onChange={evt => this.setState({ email: evt.target.value })} type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Ingrese correo electrónico\" required></input>\r\n                        </div>\r\n                        <div className=\"form-group\" style={{ width: '100%' }}>\r\n                            <input value={this.state.password} onChange={evt => this.setState({ password: evt.target.value })} type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Contraseña\" required></input>\r\n                        </div>\r\n                        <button onClick={this.login} type=\"submit\" className=\"btn btn-secondary btn-lg btn-block\">Ingresar</button>\r\n                        <p className='mt-3' style={{ alignSelf: 'flex-end', color: this.state.fetching ? 'black' : 'red' }} >{this.state.error}</p>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { LoginComponent };\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow, Polyline } from 'google-maps-react';\nimport { isMobileDevice } from './commons/device';\n\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.firestore = null;\n    var bd = new Date();\n    bd.setHours(0, 0, 0);\n    this.beginningDateObject = bd;\n    try {\n      let current = firebase.auth().currentUser;\n      if (!current) {\n        this.props.replace('/', '');\n      }\n      this.firestore = firebase.firestore();\n    } catch (error) {\n      this.props.history.replace('/', '');\n    }\n    this.state = {\n      stores: [],\n      locations: [],\n      selectedBusId: -1,\n      buses: [\n        { id: 'Cp3arit19GVGsKMVhxew', name: 'Bus 1' }, {\n          id: 'PcSUAY7w4p3nXfP9MLyf', name: 'Bus 2'\n        }, {\n          id: 'ql9zKGWuOZtCRJncfaIL', name: 'Bus 3'\n        }, {\n          id: 'Bustest', name: 'test'\n        }\n      ],\n      selectedPlace: '',\n      activeMarker: null,\n      showingInfoWindow: false,\n      distance: '--',\n      selectedBus: null\n    }\n  }\n\n  displayMarkers = () => {\n    return this.state.stores.map((store, index) => {\n      return <Marker key={index} id={index} title='Hi' name={store.time} position={{\n        lat: store.latitude,\n        lng: store.longitude\n      }}\n        onClick={this.onMarkerClick}  >\n      </Marker>\n    })\n  }\n\n  deleteOldDates(bus) {\n    let batch = this.firestore.batch();\n    this.firestore.collection('server').doc(bus.id).collection('tracking').where('CreatedAt', '<=', this.beginningDateObject).orderBy('CreatedAt').get().then(\n      querySnapshot => {\n        querySnapshot.forEach(\n          element => {\n            batch.delete(element.ref);\n          }\n        );\n        batch.commit().then(data => { });\n      });\n  }\n\n  getMarkers(bus) {\n    this.setState({ selectedBusId: bus.id });\n    let markers = [];\n    const bounds = new window.google.maps.LatLngBounds();\n    let locations = [];\n    this.deleteOldDates(bus);\n    let distance = 0.0;\n    this.firestore.collection('server').doc(bus.id).collection('tracking').where('CreatedAt', '>', this.beginningDateObject).orderBy('CreatedAt').get().then(\n      querySnapshot => {\n        querySnapshot.forEach(\n          element => {\n            distance += .025;\n            let marker = element.data();\n            let localDate = new Date(0); // The 0 there is the key, which sets the date to the epoch\n            localDate.setUTCSeconds(marker.CreatedAt.seconds);\n            let time = `${localDate.getHours()}:${localDate.getMinutes()}`\n            markers.push({ latitude: marker.latitud, longitude: marker.longitud, time });\n            bounds.extend(new window.google.maps.LatLng(\n              marker.latitud,\n              marker.longitud\n            ));\n            locations.push({ lat: marker.latitud, lng: marker.longitud });\n          }\n        );\n        this.setState({ stores: markers, locations: locations, distance: distance.toString() }, () => {\n\n        });\n      }\n    );\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  render() {\n    return (\n      <div>\n        <div className=\"navbar navbar-dark bg-dark\" style={{ display: 'flex', paddingTop: 20, alignItems: 'center', paddingBottom: 20 }} >\n          <img src={'/admin-app/assets/Nogales.png'} height={isMobileDevice() ? 30 : '100%'} alt=\"Logo\"></img>\n          <div onClick={() => {\n            firebase.auth().signOut().then(\n              () => {\n                this.props.history.replace('/', '');\n              }\n            )\n          }} className=\"btn btn-outline-success my-2 my-sm-0\">Salir</div>\n        </div>\n\n        <div className=\"container mt-3\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <div className=\"card p-3\">\n                <h4 className=\"mb-3\">Camiones de basura</h4>\n                <br></br>\n                <h2>Reporte del día</h2>\n                <div className=\"list-group\">\n                  {this.state.buses.map(bus => <div className={bus.id === this.state.selectedBusId ? 'list-group-item active' : 'list-group-item'} style={{ cursor: \"pointer\" }} onClick={() => this.getMarkers(bus)} class=\"list-group-item list-group-item-action\">{bus.name}</div>)}\n                </div>\n\n                <div className=\"mt-3 p-3 card\">\n                  <strong className=\"text-center\">Distancia recorrida</strong>\n                  <strong className=\"mt-3 text-center\">{this.state.distance} KM</strong>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-9\">\n\n              <Map\n                google={this.props.google}\n                zoom={14}\n                style={{\n                  width: '100%',\n                  height: 500,\n                  overFlow: 'hidden',\n                  marginRight: 0\n                }}\n                ref={ref => this.map = ref}\n                initialCenter={{ lat: 18.8157483, lng: -97.1640488 }}\n              >\n                {this.displayMarkers()}\n                <InfoWindow\n                  marker={this.state.activeMarker}\n                  visible={this.state.showingInfoWindow}>\n                  <div>\n                    <p>{this.state.selectedPlace.name}</p>\n                  </div>\n                </InfoWindow>\n                {this.state.locations ? <Polyline\n                  path={this.state.locations}\n                  strokeColor=\"#0000FF\"\n                  strokeOpacity={0.8}\n                  strokeWeight={2} /> : null}\n              </Map>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nMapContainer = GoogleApiWrapper({\n  apiKey: 'AIzaSyCls2n588WAf6AHLWYU69MKcPWKYrMfJcI',\n  language: \"ES\"\n})(MapContainer);\n","import React from \"react\";\r\nimport { Route, Switch ,HashRouter as Router } from 'react-router-dom'\r\nimport {LoginComponent} from './components';\r\nimport { MapContainer } from './App';\r\n\r\nexport const routing = (\r\n    <Router basename='/'>\r\n        <Switch>\r\n            <Route exact path=\"/\" component={LoginComponent} />\r\n            <Route path=\"/map\" component={MapContainer} />\r\n        </Switch>\r\n    </Router>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { routing } from \"./Routing\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}